;(in-package :user)

(defun set_pos (lst l c val)
    (setf (nth l (nth c lst)) val)
)

(defun get_pos (lst l c)
    (nth l (nth c lst))
)

(defun do_action_tail (board l c)
    (let ((lines   (length board))
            (columns (length (first board)))
            (color (get_pos board l c))
            (pos_changed '()))
        (set_pos board l c nil)
        (if (<= l (+ lines 1))
            (if (eq color (get_pos board (+ l 1) c ))
                (do_action_tail board (+ l 1) c)
                ;; (setq (append pos_changed (do_action_tail board (+ l 1) c)) pos_changed)
            )
        )
        (if (>= (- l 1) 0)
            (if (eq color (get_pos board (- l 1) c))
                (do_action_tail board  (- l 1) c)
                ;; (setq (append pos_changed (do_action_tail board  (- l 1) c)) pos_changed)
            )
        )
        (if (<= c (+ columns 1))
            (if (eq color (get_pos board l (+ c 1)))
                (do_action_tail board l (+ c 1))
                ;; (setq (append pos_changed (do_action_tail board l (+ c 1))) pos_changed)
            )
        )
        (if (>= (- c 1) 0)
            (if (eq color (get_pos board l (- c 1)))
                (do_action_tail board  l (- c 1))
                ;; (setq (append pos_changed (do_action_tail board  l (- c 1))) pos_changed)
            )
        )
        pos_changed
    )
    board
)

(defun do_action (board position)
    (do_action_tail board (first position) (second position))
    board
)

;; (defun possible_action (board position)
;;     (let ((lines   (length board))
;;             (columns (length (first board)))
;;             (l (first  position))
;;             (c (second position))
;;             (color (get_pos board l c))
;;             ((get_pos board l c) nil)
;;             (adj_same_color 0))
;;         (if (<= l (+ lines 1))
;;             (if (eq color (get_pos board (+ l 1) c ))
;;                 (+ adj_same_color 1)
;;             )
;;         )
;;         (if (>= 0 (- lines 1))
;;             (if (eq color (get_pos board (- l 1) c))
;;                 (+ adj_same_color 1)
;;             )
;;         )
;;         (if (<= c (+ columns 1))
;;             (if (eq color (get_pos board l (+ c 1)))
;;                 (+ adj_same_color 1)
;;             )
;;         )
;;         (if (>= 0 (- columns 1))
;;             (if (eq color (get_pos board l (- c 1)))
;;                 (+ adj_same_color 1)
;;             )
;;         )
;;         (>= adj_same_color 2)
;;     )
;; )

(do_action '((1 2 2 3 3) (2 2 2 1 3) (1 2 2 2 2) (1 1 1 1 1)) '(1 0))
